#!/usr/bin/julia

using Pkg
using BenchmarkTools

Pkg.activate(@__DIR__)
using aoc

# Write the benchmark results into a markdown string:
function _to_markdown_table(bresults)
    header = "| Day | Part | Time | Allocated memory |\n" *
             "|----:|----:|-----:|-----------------:|"
    lines = [header]
    for (d, p, t, m) in bresults
        ds = string(d)
        ps = string(p)
        ts = BenchmarkTools.prettytime(t)
        ms = BenchmarkTools.prettymemory(m)
        push!(lines, "| $ds | $ps | $ts | $ms |")
    end
    return join(lines, "\n")
end

if ARGS[1] == "b"
    if length(ARGS) == 3
        day = parse(Int, ARGS[2])
        part = parse(Int, ARGS[3])
        local daySymbol = Symbol("benchmarkDay" * lpad(day, 2, "0"))
        println("Day $day - part $part:")
        display(@eval $daySymbol(part))
    else
        results = []
        for day in aoc.solvedDays
            local daySymbol = Symbol("benchmarkDay" * lpad(day, 2, "0"))
            r = @eval $daySymbol(1)
            println("Day $day - part 2:")
            display(r)
            push!(results, (day, 1, time(r), memory(r)))
            println("Day $day - part 2:")
            r = @eval $daySymbol(2)
            display(r)
            push!(results, (day, 2, time(r), memory(r)))
        end
        println(_to_markdown_table(results))
    end

    exit()
end

ds = lpad(parse(Int, ARGS[1]), 2, "0")
dayFn = Symbol("day" * ds)
part = parse(Int, ARGS[2])

if (part != 1) && (part != 2)
    error("Invalid part number")
end

@eval begin
    $dayFn(part)
end

